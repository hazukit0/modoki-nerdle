{"version":3,"sources":["common.tsx","GameLogic.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["log","v","console","collectionName","app","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","getAnalytics","getFirestore","resultsCol","collection","Nerdle","operations","state","squares","isFinished","activeSquare","result","message","this","getResult","clearState","clearOperations","value","class","yyyymmdd","Date","toISOString","slice","replace","q","query","where","documentId","limit","getDocs","docs","forEach","resultDoc","data","_this","i","j","beforeActiveSquare","operation","is_inputs","find","e","is_operators","length","resultArray","values","map","square","inputCheck","setStyle","join","array","indexOf","str","checkCalculation","equation","parts","split","leftResult","rightResult","Function","_this2","_loop","operationClass","squareClass","Square","props","react_default","a","createElement","className","concat","filter","onClick","Board","row","key","toString","column","App_Square","renderSquare","OperationButton","OperationBoard","App_OperationButton","renderOperations","Game","_useState","useState","logic","_useState2","Object","slicedToArray","setState","status","App_Board","clickBoard","_ref","App_OperationBoard","clickOperationBoard","_ref2","App","initialize","App_Game","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.80e0394d.chunk.js","sourcesContent":["// common method module\n\nexport function log(v : any) {\n    console.log(v);\n}","// game logic\nimport React from 'react';\nimport { SquareState, GameState, GameLogicInterface } from './GameLogicInterface';\nimport { log } from './common';\n\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getFirestore, CollectionReference, collection, documentId, DocumentData, getDocs, query, limit, where } from 'firebase/firestore'\nimport 'firebase/firestore';\nimport firebase from \"firebase/compat/app\"\n\n// todo split source file\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nconst firestore = getFirestore();\n\n// create collection for firebase\nconst createCollection = <T = DocumentData>(collectionName: string) => {\n  return collection(firestore, collectionName) as CollectionReference<T>\n}\n// result collection\nconst resultsCol = createCollection<DocumentData>('results')\n\nexport function getGameLogic() : GameLogicInterface {\n  return new Nerdle;\n}\n\n//////////////////////////////////////////////////////////////////////////////\n// GameLogicInterface implementation\n// Replacing here changes the logic of the game\n//////////////////////////////////////////////////////////////////////////////\n// html class\nconst CLASS_ACTIVE = 'active'\n// message\nconst MESSAGE_ERROR_NO_COMPUTE = 'That guess doesn\\'t compute!'\nconst MESSAGE_ERROR_BLANKS     = 'That guess doesn\\'t compute - Please foll in the blanks!'\nconst MESSAGE_YOU_WON          = 'You won!'\nconst MESSAGE_YOU_LOST         = 'You lost, the calculation was '\n// css class\nconst CSS_CLASS_SQUARE_GREEN = 'green'\nconst CSS_CLASS_SQUARE_PURPLE = 'purple'\nconst CSS_CLASS_SQUARE_BLACK = 'black'\n\n\n// nerdle game logic\nclass Nerdle implements GameLogicInterface {\n  // oparations button\n  operations = [] as SquareState[][]\n  // game state\n  state = {\n    squares: [],\n    isFinished: false,\n    activeSquare: [0,0]\n  } as GameState\n  \n  // todo Multiple result\n  result = '2*3+5=11'\n  // resutlts = ['2*3+5=11','3*2+5=11','5+3*2=11']\n  message = ''\n  \n  // initialize member\n  initialize() : boolean {\n    this.getResult()\n    this.clearState()\n    this.clearOperations()\n    return true\n  }\n  \n  // crear state\n  clearState() : void {\n    // todo generate params automatically\n    this.state = {\n      squares: [\n        [{value: '', class: [CLASS_ACTIVE]}, {value: '', class: ['']},{value: '', class: ['']}, {value: '', class: ['']}, {value: '', class: ['']},{value: '', class: ['']}, {value: '', class: ['']}, {value: '', class: ['']}], \n        [{value: '', class: ['']}, {value: '', class: ['']},{value: '', class: ['']}, {value: '', class: ['']}, {value: '', class: ['']},{value: '', class: ['']}, {value: '', class: ['']}, {value: '', class: ['']}],\n        [{value: '', class: ['']}, {value: '', class: ['']},{value: '', class: ['']}, {value: '', class: ['']}, {value: '', class: ['']},{value: '', class: ['']}, {value: '', class: ['']}, {value: '', class: ['']}],\n        [{value: '', class: ['']}, {value: '', class: ['']},{value: '', class: ['']}, {value: '', class: ['']}, {value: '', class: ['']},{value: '', class: ['']}, {value: '', class: ['']}, {value: '', class: ['']}],\n        [{value: '', class: ['']}, {value: '', class: ['']},{value: '', class: ['']}, {value: '', class: ['']}, {value: '', class: ['']},{value: '', class: ['']}, {value: '', class: ['']}, {value: '', class: ['']}],\n        [{value: '', class: ['']}, {value: '', class: ['']},{value: '', class: ['']}, {value: '', class: ['']}, {value: '', class: ['']},{value: '', class: ['']}, {value: '', class: ['']}, {value: '', class: ['']}],\n      ],\n      isFinished: false,\n      activeSquare: [0,0]\n    } as GameState\n  }\n  \n  // crear state\n  clearOperations() : void {\n    // todo generate params automatically\n    // operations = [['1','2','3','4','5','6','7','8','9','0'],['+','-','*','/','='],['Enter','Delete']]\n    this.operations = [\n    [{value: '1', class: ['']},{value: '2', class: ['']},{value: '3', class: ['']},{value: '4', class: ['']},{value: '5', class: ['']},{value: '6', class: ['']},{value: '7', class: ['']},{value: '8', class: ['']},{value: '9', class: ['']},{value: '0', class: ['']}],\n    [{value: '+', class: ['']},{value: '-', class: ['']},{value: '*', class: ['']},{value: '/', class: ['']},{value: '=', class: ['']}],\n    [{value: 'Enter', class: ['']},{value: 'Delete', class: ['']}]]\n  }\n  \n  // (async) get result from server\n  async getResult() {\n    const yyyymmdd = new Date().toISOString().slice(0,10).replace(/-/g,\"\");\n    // get one result before today\n    const q = query(resultsCol, where(documentId(), '<=', yyyymmdd), limit(1));\n    const resultDocs = await getDocs(q)\n    resultDocs.docs.forEach((resultDoc) => {\n      const result = resultDoc.data()\n      this.result = result.result\n    })\n  }\n  \n  // click on the grit square\n  clickBoard(i: number, j:number) : boolean {\n    if (this.state.isFinished) return false\n    \n    this.message = ''\n    if (this.state.activeSquare[0] != i) {\n      return false\n    }\n    let beforeActiveSquare = this.state.activeSquare\n    this.state.activeSquare = [i,j]\n    // change active position\n    if (beforeActiveSquare[1] != j) {\n      this.state.squares[beforeActiveSquare[0]][beforeActiveSquare[1]].class[0] = ''\n    }\n    this.state.squares[i][j].class[0] = CLASS_ACTIVE;\n    return true\n  }\n  \n  // click on the operation button\n  clickOperationBoard(operation: string) : boolean {\n    if (this.state.isFinished) return false\n    this.message = ''\n    const is_inputs = this.operations[0].find(e => e.value === operation) || this.operations[1].find(e => e.value === operation)\n    const is_operators = this.operations[2].find(e => e.value === operation)\n    \n    if (!is_inputs && !is_operators) return false\n    \n    // todo refactoring\n    if (is_inputs && this.state.activeSquare[1] < this.state.squares[0].length) {\n      log('comman:'+operation)\n      // Change active position\n      this.state.squares[this.state.activeSquare[0]][this.state.activeSquare[1]].value = operation\n      if (this.state.activeSquare[1] < (this.state.squares[0].length - 1)) {\n        this.state.squares[this.state.activeSquare[0]][this.state.activeSquare[1]].class[0] = ''\n        this.state.squares[this.state.activeSquare[0]][this.state.activeSquare[1]+1].class[0] = CLASS_ACTIVE\n        this.state.activeSquare[1]++\n      }\n    } else if (is_operators) {\n      switch (operation) {\n        case 'Enter':\n          log('comman:Enter')\n          // Check the result\n          const resultArray = this.state.squares[this.state.activeSquare[0]]\n          const values = resultArray.map(square => square.value as string)\n          if ( !this.inputCheck(values) ) {\n            return true\n          }\n          this.state.squares[this.state.activeSquare[0]][this.state.activeSquare[1]].class[0] = ''\n          this.setStyle(resultArray)\n\n          if (values.join('') == this.result) {\n            // won\n            this.state.isFinished = true\n            this.message = MESSAGE_YOU_WON\n          } else if (this.state.activeSquare[0] < (this.state.squares.length - 1)) {\n            // next row\n            this.state.activeSquare[0]++\n            this.state.activeSquare[1] = 0\n            this.state.squares[this.state.activeSquare[0]][this.state.activeSquare[1]].class[0] = CLASS_ACTIVE\n          } else {\n            // Game over\n            this.message = MESSAGE_YOU_LOST + this.result\n          }\n          break;\n        case 'Delete':\n          log('comman:Delete')\n          // delete\n          if (this.state.activeSquare[1] >= 1 && this.state.squares[this.state.activeSquare[0]][this.state.activeSquare[1]].value == '') {\n            this.state.squares[this.state.activeSquare[0]][this.state.activeSquare[1]].class[0] = ''\n            this.state.activeSquare[1]--\n            this.state.squares[this.state.activeSquare[0]][this.state.activeSquare[1]].value = ''\n            this.state.squares[this.state.activeSquare[0]][this.state.activeSquare[1]].class[0] = CLASS_ACTIVE\n          } else {\n            this.state.squares[this.state.activeSquare[0]][this.state.activeSquare[1]].value = ''\n          }\n          break;\n      }\n    }\n    return true\n  }\n\n  // input check\n  private inputCheck(array : string[]) : boolean {\n    // empty check\n    if (array.indexOf('') >= 0) {\n      this.message = MESSAGE_ERROR_BLANKS\n      return false\n    }\n    // check for calculability\n    const str = array.join('')\n    if (!this.checkCalculation(str)) {\n      this.message = MESSAGE_ERROR_NO_COMPUTE\n      return false\n    }\n    return true\n  }\n  \n  // check for calculability\n  private checkCalculation(equation : string) : boolean {\n    const parts = equation.split('=')\n    if (parts.length != 2) return false\n    let leftResult = 0\n    let rightResult = 0\n    try {\n      leftResult = Function('return ('+parts[0]+');')();\n      rightResult = Function('return ('+parts[1]+');')();\n    } catch (e) {\n      return false\n    }\n    return (leftResult == rightResult)\n  }\n  \n  // set cell background from results\n  private setStyle(resultArray: SquareState[]) {\n    for (var i = 0; i < resultArray.length; i++) {\n      const v = resultArray[i]\n      let operation = this.operations[0].find(e => e.value === v.value) || this.operations[1].find(e => e.value === v.value)\n      let operationClass = operation ? operation.class[0] : ''\n      let squareClass = ''\n      \n      if (v.value == this.result[i]) {\n        squareClass = CSS_CLASS_SQUARE_GREEN\n        operationClass = CSS_CLASS_SQUARE_GREEN\n      } else  if (this.result.indexOf(v.value) >= 0) {\n        squareClass = CSS_CLASS_SQUARE_PURPLE\n        if (operationClass != CSS_CLASS_SQUARE_GREEN) {\n          operationClass = CSS_CLASS_SQUARE_PURPLE\n        }\n      } else {\n        squareClass = CSS_CLASS_SQUARE_BLACK\n        operationClass = CSS_CLASS_SQUARE_BLACK\n      }\n      \n      v.class[0] = squareClass\n      if (operation) {\n        operation.class[0] = operationClass\n      }\n    }\n    \n    \n  }\n  \n}\n","import React from 'react';\nimport { useState } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport { SquareState, GameState, GameLogicInterface } from './GameLogicInterface';\nimport { getGameLogic } from './GameLogic';\nimport { log } from './common';\n\n// Square props type\ntype SquareProps = {\n  state: SquareState\n  onClick: () => void\n}\n\n// Square component\nconst Square = (props: SquareProps) => (\n  <button className={`square ${props.state.class.filter(v => v).join(' ')}`} onClick={props.onClick}>\n    {props.state.value}\n  </button>\n)\n\n// Board props type\ntype BoardProps = {\n  squares: SquareState[][]\n  onClick: (i: number,j: number) => void\n}\n\n// Board component\nconst Board = (props: BoardProps) => {\n  const renderSquare = (i: number,j: number) => (\n    <Square state={props.squares[i][j]} onClick={() => props.onClick(i,j)} key={i.toString()+'-'+j.toString()}/>\n  )\n\n  return (\n    <div className='grid'>\n    {props.squares.map((row, i) => (\n      <div className='board-row' key={i.toString()}>\n      {row.map((column, j) => (\n        renderSquare(i,j)\n      ))}\n      </div>\n    ))}\n    </div>\n  )\n}\n\n// OperationButton props type\ntype OperationButtonProps = {\n  operations: SquareState\n  onClick: () => void\n}\n\n// OperationButton component\nconst OperationButton = (props: OperationButtonProps) => (\n  <button className={`square ${props.operations.class.filter(v => v).join(' ')}`} onClick={props.onClick}>\n    {props.operations.value}\n  </button>\n)\n\n// OperationBoard props type\ntype OperationBoardProps = {\n  operations: SquareState[][]\n  onClick: (i: string) => void\n}\n\n// OperationBoard component\nconst OperationBoard = (props: OperationBoardProps) => {\n  const renderOperations = (i: number,j: number) => (\n    <OperationButton operations={props.operations[i][j]} onClick={() => props.onClick(props.operations[i][j].value)} key={i.toString()+'-'+j.toString()}/>\n  )\n\n  return (\n    <div>\n    {props.operations.map((row, i) => (\n      <div className='board-row' key={i.toString()}>\n      {row.map((column, j) => (\n        renderOperations(i,j)\n      ))}\n      </div>\n    ))}\n    </div>\n  )\n}\n\n// Game component\nconst Game = (props: { logic : GameLogicInterface }) => {\n  const [state, setState] = useState<GameState>(props.logic.state)\n  \n  // display status message \n  status = props.logic.message\n  \n  // game board click event \n  const handleClickBoard = (i: number, j:number) => {\n \n    if (!props.logic.clickBoard(i, j)) return\n\n    setState(({ squares, isFinished, activeSquare}) => {\n      return {\n        squares: state.squares,\n        isFinished: state.isFinished,\n        activeSquare: state.activeSquare\n      }\n    })\n  }\n  \n  // Operation buttons click event\n  const handleClickOperationBoard = (str: string) => {\n\n    if (!props.logic.clickOperationBoard(str)) return\n \n    setState(({ squares, isFinished, activeSquare}) => {\n      return {\n        squares: state.squares,\n        isFinished: state.isFinished,\n        activeSquare: state.activeSquare\n      }\n    })\n  }\n  \n  return (\n    <div className='game'>\n      <div className='game-info'>\n        <div className='game-status'>\n          <div>{status}</div>\n        </div>\n      </div>\n      <div className='game-board'>\n        <Board squares={state.squares} onClick={handleClickBoard} />\n      </div>\n      <div className='game-operation-bord'>\n        <OperationBoard operations={props.logic.operations} onClick={handleClickOperationBoard} />\n      </div>\n    </div>\n  )\n}\n\n// Application start point\nconst App = () => {\n  var logic = getGameLogic();\n  logic.initialize()\n  return (\n    <Game logic={logic}/>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}